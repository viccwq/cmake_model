// ================================================================
// Copyright (c) 2019-2023 by VX-Lab. All rights reserved.
// 
// This file is property of VX-Lab. Any unauthorized copy,
// use or distribution is an offensive act against international
// law and may be prosecuted under federal law. Its content is
// company confidential asset.
// ================================================================
#ifndef _VIDEOCAP_H_ //auto generated by vim script
#define _VIDEOCAP_H_

#include "IVideoCap.h"
#include <opencv2/opencv.hpp>


using namespace std;

typedef struct _VideoCapCfgInternal
{
    unsigned int    chnId;          // channel id
    double          fps;            // input frame rate
    double          capFocus;       // focus of the camera(-1.0, auto_focus; > 1.0, set the actual value)
    VxlSize         capSize;        // resolution of the capture
    bool            bShowDetails;   // flag for showing details if needed
    bool            bRecDetails;    // flag for recording details if needed

    _VideoCapCfgInternal()
    {
        this->chnId         = 0;
        this->fps           = 0.0;
        this->capFocus      = -1.0;
        this->capSize       = VxlSize(640, 480);
        this->bShowDetails  = false;
        this->bRecDetails   = false;
    }

    void Load(IN const VideoCapCfg &videoCapCfg)
    {
        this->chnId         = videoCapCfg.chnId;
        this->fps           = videoCapCfg.fps;
        this->capFocus      = videoCapCfg.capFocus;
        this->capSize       = videoCapCfg.capSize;
        this->bShowDetails  = videoCapCfg.bShowDetails;
        this->bRecDetails   = videoCapCfg.bRecDetails;
    }

    void CopyTo(OUT _VideoCapCfgInternal &cfgInternal) const
    {
        cfgInternal = *this;
    }

    void Log() const
    {

    }
} VideoCapCfgInternal;

typedef struct _VideoCapParaInternal
{
    double          capFocus;       // focus of the camera(-1.0, auto_focus; > 1.0, set the actual value)
    _VideoCapParaInternal()
    {
        this->capFocus = -1.0;
    }

    void Load(IN const VideoCapPara &videoCapPara)
    {
        this->capFocus = videoCapPara.capFocus;
    }

    void CopyTo(OUT _VideoCapParaInternal &paraInternal) const
    {
        paraInternal = *this;
    }

    void Log() const
    {

    }
} VideoCapParaInternal;

class CVideoCap : public IVideoCap
{
public:
    CVideoCap();

    ~CVideoCap();

    void DisableLog();

    VXL_EXECUTION_STATUS Init(
        IN const VideoCapCfg  &cfg,
        IN const VideoCapPara &para);

    VXL_EXECUTION_STATUS Release();

    VXL_EXECUTION_STATUS Process(IN OUT char *imgBuff, IN const VxlSize &vxlSize);

    VXL_EXECUTION_STATUS SetPara(
        IN const VideoCapPara &para);

private:
    bool bIsInit;
    bool bIsFirstCall;
    cv::VideoCapture *pVideoCap;

    VideoCapCfgInternal  videoCapCfgInternal;
    VideoCapParaInternal videoCaParaInternal;

    VXL_EXECUTION_STATUS __InitCap();

    VXL_EXECUTION_STATUS __SetCfg(
        IN const VideoCapCfgInternal &cfgInternal);

    VXL_EXECUTION_STATUS __SetPara(
        IN const VideoCapParaInternal &paraInternal);

    VXL_EXECUTION_STATUS __ReleaseCap();
};


#endif //_VIDEOCAP_H_
