// ================================================================
// Copyright (c) 2019-2023 by VX-Lab. All rights reserved.
// 
// This file is property of VX-Lab. Any unauthorized copy,
// use or distribution is an offensive act against international
// law and may be prosecuted under federal law. Its content is
// company confidential asset.
// ================================================================
/// @file vxlComTypes.h
/// @brief define the common types for modules 
/// @details 
/// @author Chen Vic
/// @email vic_cwq@163.com
/// @version 
/// @date 2019-05-18

#ifndef _VXLCOMTYPES_H_ //auto generated by vim script
#define _VXLCOMTYPES_H_

////////////////////////////////// VxlSize /////////////////////////////////
template<typename _Tp> class VxlSize_
{
public:
    typedef _Tp value_type;

    //! default constructor
    VxlSize_();
    VxlSize_(_Tp _width, _Tp _height);
    VxlSize_(const VxlSize_& sz);
//     VxlSize_(const Point_<_Tp>& pt);

    VxlSize_& operator = (const VxlSize_& sz);
    //! the area (width*height)
    _Tp area() const;
    //! true if empty
    bool empty() const;

    //! conversion of another data type.
    template<typename _Tp2> operator VxlSize_<_Tp2>() const;

    _Tp width; //!< the width
    _Tp height; //!< the height
};

typedef VxlSize_<int>    VxlSize2i;
typedef VxlSize_<long>  VxlSize2l;
typedef VxlSize_<float>  VxlSize2f;
typedef VxlSize_<double> VxlSize2d;
typedef VxlSize2i VxlSize;




////////////////////////////////// VxlSize /////////////////////////////////

template<typename _Tp> inline
VxlSize_<_Tp>::VxlSize_()
    : width(0), height(0) {}

template<typename _Tp> inline
VxlSize_<_Tp>::VxlSize_(_Tp _width, _Tp _height)
    : width(_width), height(_height) {}

template<typename _Tp> inline
VxlSize_<_Tp>::VxlSize_(const VxlSize_& sz)
    : width(sz.width), height(sz.height) {}

// template<typename _Tp> inline
// VxlSize_<_Tp>::VxlSize_(const Point_<_Tp>& pt)
//     : width(pt.x), height(pt.y) {}

template<typename _Tp> template<typename _Tp2> inline
VxlSize_<_Tp>::operator VxlSize_<_Tp2>() const
{
    return VxlSize_<_Tp2>(saturate_cast<_Tp2>(width), saturate_cast<_Tp2>(height));
}

template<typename _Tp> inline
VxlSize_<_Tp>& VxlSize_<_Tp>::operator = (const VxlSize_<_Tp>& sz)
{
    width = sz.width; height = sz.height;
    return *this;
}

template<typename _Tp> inline
_Tp VxlSize_<_Tp>::area() const
{
    const _Tp result = width * height;
    CV_DbgAssert(!std::numeric_limits<_Tp>::is_integer
        || width == 0 || result / width == height); // make sure the result fits in the return value
    return result;
}

template<typename _Tp> inline
bool VxlSize_<_Tp>::empty() const
{
    return width <= 0 || height <= 0;
}

/*
template<typename _Tp> static inline
VxlSize_<_Tp>& operator *= (VxlSize_<_Tp>& a, _Tp b)
{
    a.width *= b;
    a.height *= b;
    return a;
}

template<typename _Tp> static inline
VxlSize_<_Tp> operator * (const VxlSize_<_Tp>& a, _Tp b)
{
    VxlSize_<_Tp> tmp(a);
    tmp *= b;
    return tmp;
}

template<typename _Tp> static inline
VxlSize_<_Tp>& operator /= (VxlSize_<_Tp>& a, _Tp b)
{
    a.width /= b;
    a.height /= b;
    return a;
}

template<typename _Tp> static inline
VxlSize_<_Tp> operator / (const VxlSize_<_Tp>& a, _Tp b)
{
    VxlSize_<_Tp> tmp(a);
    tmp /= b;
    return tmp;
}

template<typename _Tp> static inline
VxlSize_<_Tp>& operator += (VxlSize_<_Tp>& a, const VxlSize_<_Tp>& b)
{
    a.width += b.width;
    a.height += b.height;
    return a;
}

template<typename _Tp> static inline
VxlSize_<_Tp> operator + (const VxlSize_<_Tp>& a, const VxlSize_<_Tp>& b)
{
    VxlSize_<_Tp> tmp(a);
    tmp += b;
    return tmp;
}

template<typename _Tp> static inline
VxlSize_<_Tp>& operator -= (VxlSize_<_Tp>& a, const VxlSize_<_Tp>& b)
{
    a.width -= b.width;
    a.height -= b.height;
    return a;
}

template<typename _Tp> static inline
VxlSize_<_Tp> operator - (const VxlSize_<_Tp>& a, const VxlSize_<_Tp>& b)
{
    VxlSize_<_Tp> tmp(a);
    tmp -= b;
    return tmp;
}

template<typename _Tp> static inline
bool operator == (const VxlSize_<_Tp>& a, const VxlSize_<_Tp>& b)
{
    return a.width == b.width && a.height == b.height;
}

template<typename _Tp> static inline
bool operator != (const VxlSize_<_Tp>& a, const VxlSize_<_Tp>& b)
{
    return !(a == b);
}
*/

#endif //_VXLCOMTYPES_H_
